server.port=8081

## default connection pool
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

spring.datasource.url=jdbc:postgresql://localhost:5432/vinyl

## add to environment variables
## spring.datasource.username=here should be db username
## spring.datasource.password=here should be db password

spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.open-in-view=false

## JWT Properties
app.jwtSecret= JWTSuperSecretKey
app.jwtExpirationInMs = 604800000

## sql queries file path
## user
sql.create.user.query.path=user/createUserQuery.sql
sql.find.user.credentials.by.login.query.path=user/findUserCredentialsByLoginQuery.sql
## salesman
sql.get.all.salesmen.query.path=salesman/getAllSalesmenQuery.sql
sql.get.salesman.by.tab.num.query.path=salesman/getSalesmanByTabNumQuery.sql
sql.create.salesman.query.path = salesman/createSalesmanQuery.sql
sql.update.salesman.query.path = salesman/updateSalesmanQuery.sql
##composer
sql.create.composer.query.path = composer/createComposerQuery.sql
sql.get.composer.by.name.query.path = composer/getComposerByNameQuery.sql
sql.find.composers.by.country.query.path = composer/findComposersByCountryQuery.sql
sql.find.composers.by.activity.period.query.path = composer/findComposersByActivityPeriodQuery.sql
sql.update.composer.query.path = composer/updateComposerQuery.sql
sql.get.all.composers.query.path = composer/getAllComposersQuery.sql
sql.find.composer.by.multiply.criteria.query.path = composer/findComposerByMultiplyCriteriaQuery.sql
sql.get.tracks.query.path = composer/getTracksQuery.sql
## customer
sql.create.customer.query.path=customer/createCustomerQuery.sql
sql.get.customer.by.num.query.path=customer/getCustomerByNumQueryPath.sql
sql.update.customer.query.path=customer/updateCustomerQuery.sql
sql.delete.customer.query.path=customer/deleteCustomerQuery.sql
sql.get.all.customers.query.path=customer/getAllCustomers.sql
## record
sql.create.record.query.path=record/createRecordQuery.sql
## sequence
sql.get.barcode.sequence.next.value.quey.path=barcode_sequence/getNextBarcodeSequenceValue.sql
## artist
sql.artist.get.current.bands.query.path=artist/getCurrentBands.sql
sql.artist.get.previous.bands.query.path=artist/getPreviousBands.sql
sql.artist.get.tracks.query.path=artist/getTracks.sql
sql.artist.get.featuring.tracks.query.path=artist/getFeaturingTracks.sql
sql.create.artist.query.path=artist/createArtist.sql
sql.get.artist.by.alias.query.path=artist/getArtistByAlias.sql
sql.get.all.artists.query.path=artist/getAllArtists.sql
sql.update.artist.query.path=artist/updateArtistQuery.sql
sql.get.all.bands.in.certain.period.membership=artist/getBandsArtistWasMemberInCertainPeriod.sql
sql.get.artists.by.country.query.path=artist/getArtistsByCountry.sql
## band
sql.band.get.current.artists.query.path=band/getCurrentArtists.sql
sql.band.get.previous.artists.query.path=band/getPreviousArtists.sql
sql.band.get.tracks.query.path=band/getTracks.sql
sql.band.get.featuring.tracks.query.path=band/getFeaturingTracks.sql
## album
sql.album.get.tracks.by.catalog.num.query.path=album/getTracks.sql
sql.get.album.genre.by.catalog.num.query.path=album/getGenre.sql
sql.get.releases.by.catalog.num.query.path=album/getReleases.sql
##track
sql.track.get.composers.query.path = track/getComposersQuery.sql
sql.track.get.albums.query.path = track/getAlbumsQuery.sql
sql.track.get.artists.query.path = track/getArtistsQuery.sql
sql.track.get.bands.query.path = track/getBandsQuery.sql
sql.track.get.featuring.artists.query.path = track/getFeaturingArtistsQuery.sql
sql.track.get.featuring.bands.query.path = track/getFeaturingBandsQuery.sql
## release
sql.release.get.records.query.path=release/getRecords.sql