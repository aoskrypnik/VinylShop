server.port=8087
## default connection pool
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5
spring.datasource.url=jdbc:postgresql://localhost:5432/vinyl
## add to environment variables
## spring.datasource.username=here should be db username
## spring.datasource.password=here should be db password
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.open-in-view=false
## JWT Properties
app.jwtSecret=JWTSuperSecretKey
app.jwtExpirationInMs=604800000
## sql queries file path
## user
sql.create.user.query.path=user/createUserQuery.sql
sql.find.user.credentials.by.login.query.path=user/findUserCredentialsByLoginQuery.sql
sql.find.salesman.tab.num.by.user.login.query.path=user/findSalesmanTabNumByUserLogin.sql
sql.change.password.query.path=user/changePasswordQuery.sql
## salesman
sql.salesmen.get.salesman.by.tab.num.query.path=salesman/getSalesmanByTabNumQuery.sql
sql.salesmen.create.salesman.query.path=salesman/createSalesmanQuery.sql
sql.salesmen.update.salesman.query.path=salesman/updateSalesmanQuery.sql
sql.salesman.update.salesman.login.query.path=salesman/updateSalesmanLoginQuery.sql
##composer
sql.composer.create.composer.query.path=composer/createComposerQuery.sql
sql.composer.get.composer.by.name.query.path=composer/getComposerByNameQuery.sql
sql.composer.update.composer.query.path=composer/updateComposerQuery.sql
sql.composer.get.tracks.query.path=composer/getTracksQuery.sql
## customer
sql.customer.create.customer.query.path=customer/createCustomerQuery.sql
sql.customer.get.customer.by.num.query.path=customer/getCustomerByNumQuery.sql
sql.customer.update.customer.query.path=customer/updateCustomerQuery.sql
sql.customer.delete.customer.query.path=customer/deleteCustomerQuery.sql
sql.customer.update.discount.query.path=customer/updateDiscountQuery.sql
sql.customer.get.sum.for.all.purchases.query.path=customer/getSumForAllPurchases.sql
## record
sql.record.create.record.query.path=record/createRecordQuery.sql
sql.record.get.record.by.barcode.query.path=record/getRecordByBarcodeQuery.sql
sql.record.update.record.query.path=record/updateRecordQuery.sql
sql.record.check.if.record.is.available.query.path=record/checkIfRecordIsAvailableQuery.sql
## sequence
sql.get.barcode.sequence.next.value.query.path=barcode_sequence/getNextBarcodeSequenceValue.sql
## artist
sql.artist.get.current.bands.query.path=artist/getCurrentBandsQuery.sql
sql.artist.get.previous.bands.query.path=artist/getPreviousBandsQuery.sql
sql.artist.get.tracks.query.path=artist/getTracksQuery.sql
sql.artist.get.featuring.tracks.query.path=artist/getFeaturingTracksQuery.sql
sql.artist.create.artist.query.path=artist/createArtistQuery.sql
sql.artist.get.artist.by.alias.query.path=artist/getArtistByAliasQuery.sql
sql.artist.update.artist.query.path=artist/updateArtistQuery.sql
sql.artist.get.all.bands.in.certain.period.membership=artist/getBandsArtistWasMemberInCertainPeriodQuery.sql
sql.artist.get.artists.by.country.query.path=artist/getArtistsByCountryQuery.sql
sql.artist.delete.artist.by.alias.query.path=artist/deleteArtistByAliasQuery.sql
sql.artist.all.albums.sold.out.query.path=artist/artistsAllAlbumsOfWhichWereSold.sql
## band
sql.band.get.current.artists.query.path=band/getCurrentArtistsQuery.sql
sql.band.create.band.query.path=band/createBandQuery.sql
sql.band.get.band.by.alias.name.query.path=band/getBandByAliasQuery.sql
sql.band.get.previous.artists.query.path=band/getPreviousArtistsQuery.sql
sql.band.get.tracks.query.path=band/getTracksQuery.sql
sql.band.get.featuring.tracks.query.path=band/getFeaturingTracksQuery.sql
sql.band.delete.band.by.alias.query.path=band/deleteBandByAliasQuery.sql
sql.band.update.band.query.path=band/updateBandQuery.sql
## album
sql.album.create.album.query.path=album/createAlbumQuery.sql
sql.album.get.tracks.by.catalog.num.query.path=album/getTracksQuery.sql
sql.album.get.album.genre.by.catalog.num.query.path=album/getGenreQuery.sql
sql.album.get.releases.by.catalog.num.query.path=album/getReleasesQuery.sql
sql.album.get.album.by.catalog.num.query.path=album/getAlbumByCatalogNumQuery.sql
sql.album.update.album.query.path=album/updateAlbumQuery.sql
sql.album.delete.genres.from.album.query.path=album/deleteGenresFromAlbum.sql
##albumgenre
sql.albumgenre.create.genre.query.path=albumgenre/addAlbumGenreQuery.sql
##track language
sql.track.language.add.track.language.query.path=track_language/addTrackLanguageQuery.sql
##track
sql.track.create.track.query.path=track/createTrackQuery.sql
sql.track.get.composers.query.path=track/getComposersQuery.sql
sql.track.get.albums.query.path=track/getAlbumsQuery.sql
sql.track.get.artists.query.path=track/getArtistsQuery.sql
sql.track.get.bands.query.path=track/getBandsQuery.sql
sql.track.get.featuring.artists.query.path=track/getFeaturingArtistsQuery.sql
sql.track.get.featuring.bands.query.path=track/getFeaturingBandsQuery.sql
sql.track.get.languages.query.path=track/getTrackLanguagesQuery.sql
sql.track.get.track.by.catalog.num.query.path=track/getTrackByCatalogNumQuery.sql
sql.track.delete.query.path=track/deleteTrackByCatalogNumQuery.sql
sql.track.add.albums.to.track=track/addAlbumsToTrack.sql
sql.track.add.composers.to.track=track/addComposersToTrack.sql
sql.track.update.track.query.path=track/updateTrackQuery.sql
sql.track.delete.albums.from.track.query.path=track/deleteAlbumsFromTrackQuery.sql
sql.track.delete.composers.from.track.query.path=track/deleteComposersFromTrackQuery.sql
sql.track.delete.languages.from.track.query.path=track/deleteLanguagesFromTrackQuery.sql
## release
sql.release.get.records.query.path=release/getRecordsQuery.sql
sql.release.get.release.by.barcode.query.path=release/getReleaseByBarcodeQuery.sql
sql.release.create.release.query.path=release/createReleaseQuery.sql
sql.update.release.query.path=release/updateReleaseQuery.sql
##artist2band
sql.artist2band.create.artist.to.band.query.path=artist2band/createArtistToBandQuery.sql
sql.artist2band.update.artist.to.band.query.path=artist2band/updateArtistToBandQuery.sql
sql.artist2band.get.artist.to.band.query.path=artist2band/getArtistToBandQuery.sql
sql.artist2band.delete.artist.to.band.query.path=artist2band/deleteArtistToBandQuery.sql
## track performer
sql.create.artist.track.performance.query.path=track_performer/createArtistTrackPerformance.sql
sql.create.band.track.performance.query.path=track_performer/createBandTrackPerformance.sql
sql.update.artist.track.performance.query.path=track_performer/updateArtistTrackPerformance.sql
sql.update.band.track.performance.query.path=track_performer/updateBandTrackPerformance.sql
sql.get.artist.track.performance.query.path=track_performer/getArtistTrackPerformanceByName.sql
sql.get.band.track.performance.query.path=track_performer/getBandTrackPerformanceByName.sql
sql.delete.artist.track.performance.query.path=track_performer/deleteArtistTrackPerformer.sql
sql.delete.band.track.performance.query.path=track_performer/deleteBandTrackPerformer.sql
sql.union.track2artist.with.track2band.query.path=track_performer/unionTrack2ArtistWithTrack2Band.sql
## check
sql.check.get.check.by.num.query.path=check/getCheckByNum.sql
sql.check.save.check.query.path=check/saveCheck.sql
sql.check.populate.with.products.query.path=check/populateWithProductsQuery.sql
sql.check.get.all.product.barcodes.from.check=check/getAllProductBarcodesFromCheck.sql
##writeoff
sql.writeoff.create.writeoff.query.path=writeoff/createWriteOffQuery.sql
sql.writeoff.get.writeoff.by.num.query.path=writeoff/getWriteOffByNumQuery.sql
sql.writeoff.update.writeoff.query.path=writeoff/updateWriteOffQuery.sql;
sql.writeoff.get.writeoff.by.product.barcode.query.path=writeoff/getWriteOffByProductBarcodeQuery.sql
## supplier
sql.supplier.create.supplier.query.path=supplier/createSupplier.sql
sql.supplier.get.supplier.by.edrpou.query.path=supplier/getSupplierByEdrpou.sql
sql.supplier.update.supplier.query.path=supplier/updateSupplier.sql